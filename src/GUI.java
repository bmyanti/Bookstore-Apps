
import java.io.File;
import weka.core.Attribute;
import weka.core.FastVector;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.converters.ArffSaver;
import weka.filters.Filter;
import weka.filters.unsupervised.instance.NonSparseToSparse;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Random;
import java.util.Set;
import java.util.StringTokenizer;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import weka.classifiers.functions.LibSVM;
import weka.attributeSelection.AttributeEvaluator;
import weka.attributeSelection.AttributeSelection;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.ChiSquaredAttributeEval;
import weka.attributeSelection.GainRatioAttributeEval;
import weka.attributeSelection.GreedyStepwise;
import weka.attributeSelection.InfoGainAttributeEval;
import weka.attributeSelection.Ranker;
import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.classifiers.lazy.IBk;
import weka.core.Instances;
import weka.classifiers.functions.SMO;
import weka.classifiers.meta.Bagging;
import weka.core.EuclideanDistance;
import weka.core.SelectedTag;
import weka.core.SerializationHelper;
import weka.core.Utils;
import weka.core.converters.ArffSaver;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.NearestNeighbourSearch;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Remove;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GUI.java
 *
 * Created on 30-Mar-2016, 09:47:53
 */
/**
 *
 * @author yanti
 */
public class GUI extends javax.swing.JFrame {
    
    public String flNamePrePro = "";
    public int count = 0;
    private static IBk wekaClassifier = new IBk();
    table_frequency table_frequency = new table_frequency();

    /** Creates new form GUI */
    public GUI() {
        initComponents();
//        l_bagging.hide();
//        et_baggingSeed.hide();
//        label_svm1.hide();
//        label_svm2.hide();
//        label_svm3.hide();
//        label_svm4.hide();
//        cb_tipekernel1.hide();
//        et_cost1.hide();
//        et_gamma1.hide();
//        et_koef1.hide();
//        et_knn_combine.hide();
//        label_knn.hide();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        chk_feature = new javax.swing.JCheckBox();
        btn_browsetrain = new javax.swing.JButton();
        et_filename = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        chk_redundant = new javax.swing.JCheckBox();
        btn_preprocessing = new javax.swing.JButton();
        btn_browsetest = new javax.swing.JButton();
        et_test = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        ta_fs = new javax.swing.JTextArea();
        btn_refresh = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        et_knn = new javax.swing.JTextField();
        btn_Run_Knn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ta_knn = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        et_gamma = new javax.swing.JTextField();
        btn_Run_Svm = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ta_svm = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        chk_svm = new javax.swing.JCheckBox();
        et_gamma1 = new javax.swing.JTextField();
        label_svm3 = new javax.swing.JLabel();
        btn_Run_Combine = new javax.swing.JButton();
        chk_knn = new javax.swing.JCheckBox();
        label_knn = new javax.swing.JLabel();
        et_knn_combine = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        et_ord_svm = new javax.swing.JTextField();
        et_ord_knn = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        ta_combine = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        ta_prediction = new javax.swing.JTextArea();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        ta_stat = new javax.swing.JTextArea();
        jPanel12 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        edt_knn = new javax.swing.JTextField();
        edt_svm = new javax.swing.JTextField();
        edt_knnSvm = new javax.swing.JTextField();
        edt_svmKnn = new javax.swing.JTextField();
        lbl_knn = new javax.swing.JLabel();
        lbl_svm = new javax.swing.JLabel();
        lbl_knnSvm = new javax.swing.JLabel();
        lbl_svmKnn = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));

        chk_feature.setText("Feature Selection");
        chk_feature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_featureActionPerformed(evt);
            }
        });

        btn_browsetrain.setText("Browse");
        btn_browsetrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_browsetrainActionPerformed(evt);
            }
        });

        et_filename.setText("(train set)");
        et_filename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                et_filenameActionPerformed(evt);
            }
        });

        jLabel1.setText("Choose Preprocessing type:");

        chk_redundant.setText("Remove Redundant");
        chk_redundant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_redundantActionPerformed(evt);
            }
        });

        btn_preprocessing.setText("RUN");
        btn_preprocessing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_preprocessingActionPerformed(evt);
            }
        });

        btn_browsetest.setText("Browse");
        btn_browsetest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_browsetestActionPerformed(evt);
            }
        });

        et_test.setText("(test set)");
        et_test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                et_testActionPerformed(evt);
            }
        });

        ta_fs.setColumns(20);
        ta_fs.setRows(5);
        ta_fs.setPreferredSize(new java.awt.Dimension(454, 350));
        jScrollPane5.setViewportView(ta_fs);

        btn_refresh.setText("Refresh");
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(365, Short.MAX_VALUE))
            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btn_browsetrain, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(et_filename, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btn_browsetest, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(et_test)))
                .addContainerGap(195, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(chk_redundant)
                        .addGap(59, 59, 59)
                        .addComponent(btn_preprocessing, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                        .addGap(145, 145, 145))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(chk_feature)
                        .addGap(30, 30, 30)
                        .addComponent(btn_refresh)
                        .addContainerGap(259, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_browsetrain)
                    .addComponent(et_filename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_browsetest)
                    .addComponent(et_test, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_refresh)
                    .addComponent(chk_feature))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_preprocessing, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chk_redundant))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Preprocessing", jPanel1);

        jPanel8.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));

        jLabel2.setText("Size K (nearest neighbor) :");

        et_knn.setText("5");

        btn_Run_Knn.setText("RUN");
        btn_Run_Knn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Run_KnnActionPerformed(evt);
            }
        });

        ta_knn.setColumns(20);
        ta_knn.setRows(5);
        jScrollPane1.setViewportView(ta_knn);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(et_knn, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(btn_Run_Knn)
                .addContainerGap(175, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(et_knn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_Run_Knn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("KNN", jPanel4);

        jLabel5.setText("Gamma");

        et_gamma.setText("0.0");

        btn_Run_Svm.setText("RUN");
        btn_Run_Svm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Run_SvmActionPerformed(evt);
            }
        });

        ta_svm.setColumns(20);
        ta_svm.setRows(5);
        jScrollPane2.setViewportView(ta_svm);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(et_gamma)
                    .addComponent(jLabel5))
                .addGap(90, 90, 90)
                .addComponent(btn_Run_Svm)
                .addContainerGap(297, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(et_gamma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btn_Run_Svm)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("SVM", jPanel5);

        chk_svm.setText("SVM");
        chk_svm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_svmActionPerformed(evt);
            }
        });

        et_gamma1.setText("0.0");
        et_gamma1.setMinimumSize(new java.awt.Dimension(7, 20));

        label_svm3.setText("Gamma: ");

        btn_Run_Combine.setText("RUN");
        btn_Run_Combine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Run_CombineActionPerformed(evt);
            }
        });

        chk_knn.setText("KNN");
        chk_knn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_knnActionPerformed(evt);
            }
        });

        label_knn.setText("Size K :");

        et_knn_combine.setText("5");
        et_knn_combine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                et_knn_combineActionPerformed(evt);
            }
        });

        jLabel7.setText("Ordinal:");

        et_ord_svm.setBackground(new java.awt.Color(153, 153, 153));
        et_ord_svm.setForeground(new java.awt.Color(255, 255, 255));
        et_ord_svm.setText("1");

        et_ord_knn.setBackground(new java.awt.Color(153, 153, 153));
        et_ord_knn.setForeground(new java.awt.Color(255, 255, 255));
        et_ord_knn.setText("2");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chk_svm)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(btn_Run_Combine)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(et_ord_svm, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(label_svm3)
                        .addGap(18, 18, 18)
                        .addComponent(et_gamma1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chk_knn)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(label_knn)
                                .addGap(12, 12, 12)
                                .addComponent(et_knn_combine, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addComponent(et_ord_knn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(chk_svm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(label_svm3)
                            .addComponent(et_gamma1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(et_ord_svm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chk_knn)
                    .addComponent(et_ord_knn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_knn, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(et_knn_combine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(87, 87, 87)
                .addComponent(btn_Run_Combine)
                .addContainerGap(156, Short.MAX_VALUE))
        );

        ta_combine.setColumns(20);
        ta_combine.setRows(5);
        jScrollPane3.setViewportView(ta_combine);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Combine", jPanel6);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Classification", jPanel2);

        ta_prediction.setColumns(20);
        ta_prediction.setRows(5);
        jScrollPane4.setViewportView(ta_prediction);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Prediction", jPanel3);

        ta_stat.setColumns(20);
        ta_stat.setRows(5);
        jScrollPane10.setViewportView(ta_stat);

        jLabel4.setText("KNN");

        jLabel6.setText("SVM");

        jLabel8.setText("KNN + SVM");

        jLabel9.setText("SVM + KNN");

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Calculate Statistic");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(edt_knnSvm, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbl_knnSvm))
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel12Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(50, 50, 50)
                                        .addComponent(edt_svm, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(20, 20, 20))
                                    .addGroup(jPanel12Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(50, 50, 50)
                                        .addComponent(edt_knn, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(20, 20, 20)))
                                .addGap(10, 10, 10)
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lbl_svm)
                                    .addComponent(lbl_knn)))
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(edt_svmKnn, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbl_svmKnn))))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)))
                .addContainerGap(127, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(edt_knn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_knn))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(edt_svm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_svm))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(edt_knnSvm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbl_knnSvm))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(edt_svmKnn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_svmKnn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Statistic", jPanel7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void et_knn_combineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_et_knn_combineActionPerformed
}//GEN-LAST:event_et_knn_combineActionPerformed
    
private void chk_knnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_knnActionPerformed
//    if (chk_knn.isSelected() == true) {
//        et_knn_combine.show();
//        label_knn.show();
//    } else {
//        et_knn_combine.hide();
//        label_knn.hide();
//    }
}//GEN-LAST:event_chk_knnActionPerformed
    
private void btn_Run_CombineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Run_CombineActionPerformed
    long starttime = new Date().getTime();
    String cb1 = "....";
    String etfl = "(train set)";
    String ettest = "(test set)";
    String ksg = "";
    
    
    
    if (et_filename.getText().toString().equals(etfl)) {
        JFrame frame = new JFrame("JOptionPane showMessageDialog example");
        JOptionPane.showMessageDialog(frame, "Anda harus memilih file data train!");
        
    } else if (et_test.getText().toString().equals(ettest)) {
        JFrame frame = new JFrame("JOptionPane showMessageDialog example");
        JOptionPane.showMessageDialog(frame, "Anda harus memilih file data test!");
    } else if (chk_svm.isSelected() == false && chk_knn.isSelected() == false) {
        JFrame frame = new JFrame("JOptionPane showMessageDialog example");
        JOptionPane.showMessageDialog(frame, "Anda harus memilih kombinasi algoritma!");
    } else if (et_gamma1.getText().toString().equals(ksg) || et_gamma1.getText().toString().contains("-")) {
        JFrame frame = new JFrame("JOptionPane showMessageDialog example");
        JOptionPane.showMessageDialog(frame, "Parameter yang anda masukkan tidak boleh kosong atau <0!");
    } else {
        BufferedReader reader1 = null;
        try {
            reader1 = new BufferedReader(new FileReader(et_test.getText().toString()));
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
        String liner = "";
        int i = 0;
        
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new FileReader(et_filename.getText().toString()));
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
        String line = "";
        int il = 0;
        
        chk_cb();

        //ibk.setKNN(Integer.parseInt(et_knn_combine.getText().toString()));
        //int bagging_size = Integer.parseInt(et_bagging1.getText().toString());
        Bagging m_bagger = new Bagging();

        //option
        String[] option_svm = new String[]{"-S", "0",
            "-K", "2",
            "-D", "3",
            "-G", "" + et_gamma1.getText().toString(),
            "-R", "0",
            "-N", "0.5",
            "-M", "40.0",
            "-C", "0",
            "-E", "0.001",
            "-P", "0.1",
            "-W", "1"};
        
        if (chk_knn.isSelected() && chk_svm.isSelected()) {
            //FungsiSVMwithCheckModel();
            String a = "1";
            String b = "2";
            if (et_ord_svm.getText().toString().equals(a) && et_ord_knn.getText().toString().equals(b)) {
                try {
                    FungsiSVMwithCheckModel();
                } catch (FileNotFoundException ex) {
                    ex.printStackTrace();
                }
            } else if (et_ord_knn.getText().toString().equals(a) && et_ord_svm.getText().toString().equals(b)) {
                FungsiKNNSVM();
            } else {
                JFrame frame = new JFrame("JOptionPane showMessageDialog example");
                JOptionPane.showMessageDialog(frame, "Angka Yang anda masukkan salah! Seharusnya 1 atau 2!");
                System.exit(0);
            }
        } //else if (chk_knn.isSelected() && chk_bagging.isSelected() && !chk_svm.isSelected()) {
        //        Instances train = null;
        //        SerializationHelper s = new SerializationHelper();
        //            try {
        //                removeFile("ModelKNN_Bagging.model");
        //            } catch (IOException ex) {
        //                ex.printStackTrace();
        //            }
        //
        //        int nn = Integer.parseInt(et_knn_combine.getText().toString());
        //        ibk.setKNN(nn);
        //        try {
        //            if (flNamePrePro == null) {
        //                train = new Instances(DataTrainPrePro());
        //            } else {
        //                train = new Instances(DataTrain());
        //            }
        //            ibk.buildClassifier(train);
        //            //write into model
        //            System.out.println("Writing File Model..");
        //            s.write("ModelKNN_Bagging.model", ibk);
        //            System.out.println("\nWriting File Model has been finished");
        //            int bagging_size = Integer.parseInt(et_bagging1.getText().toString());
        //            Classifier c = new Bagging();
        //            c = (Classifier) s.read("ModelKNN_Bagging.model");
        //            System.out.println("\n\nReading File Model..");
        //            System.out.println("\n\nClassifying..");
        //            c.buildClassifier(train);
        //            m_bagger.setClassifier(c);
        //            m_bagger.setSeed(bagging_size);
        //            //m_bagger.setNumIterations(bagging_size);
        //            m_bagger.setCalcOutOfBag(true);
        //            m_bagger.buildClassifier(train);
        //
        //            //print each bootsrap of data
        //            Evaluation eval = new Evaluation(train);
        //            //eval.evaluateModel(m_bagger, train);
        //            eval.evaluateModel(m_bagger, train);
        //            System.out.println(eval.toSummaryString("\n ===Evaluasi KNN BAGGING ===", true));
        //            System.out.println(eval.toMatrixString());
        //            
        //            ta_combine.append(eval.toSummaryString("\n ===Evaluasi KNN BAGGING ===", true));
        //            ta_combine.append(eval.toMatrixString());
        //            
        //            BufferedWriter bw = new BufferedWriter(new FileWriter("ResultKNNBagging.txt"));
        //            bw.write(eval.toSummaryString("\n ===Evaluasi KNN BAGGING ===", true));
        //            bw.write("\n"+eval.toMatrixString());
        //            bw.close();
        //
        //            prediksi(m_bagger);
        //
        //        } catch (Exception e) {
        //        }
        //
        //    } else if (chk_svm.isSelected() && chk_bagging.isSelected() && !chk_knn.isSelected()) {
        //
        //        Instances train = null;
        //        SerializationHelper s = new SerializationHelper();
        //            try {
        //                removeFile("ModelSVM_Bagging.model");
        //            } catch (IOException ex) {
        //                ex.printStackTrace();
        //            }
        //
        //        
        //        try {
        //            if (flNamePrePro == null) {
        //                train = new Instances(DataTrainPrePro());
        //            } else {
        //                train = new Instances(DataTrain());
        //            }
        //            smo.buildClassifier(train);
        //            //write into model
        //            System.out.println("Writing File Model..");
        //            s.write("ModelSVM_Bagging.model", smo);
        //            System.out.println("\nWriting File Model has been finished");
        //            int bagging_size = Integer.parseInt(et_bagging1.getText().toString());
        //            Classifier c = new Bagging();
        //            c = (Classifier) s.read("ModelSVM_Bagging.model");
        //            System.out.println("\n\nReading File Model..");
        //            System.out.println("\n\nClassifying..");
        //            c.buildClassifier(train);
        //            m_bagger.setClassifier(c);
        //            m_bagger.setSeed(bagging_size);
        //            //m_bagger.setNumIterations(bagging_size);
        //            m_bagger.setCalcOutOfBag(true);
        //            m_bagger.buildClassifier(train);
        //
        //            //print each bootsrap of data
        //            Evaluation eval = new Evaluation(train);
        //            //eval.evaluateModel(m_bagger, train);
        //            eval.crossValidateModel(m_bagger, train, 10, new Random(3));
        //            System.out.println(eval.toSummaryString("\n ===Evaluasi SVM BAGGING ===", true));
        //            System.out.println(eval.toMatrixString());
        //            
        //            ta_combine.append(eval.toSummaryString("\n ===Evaluasi SVM BAGGING ===", true));
        //            ta_combine.append(eval.toMatrixString());
        //
        //            
        //            
        //            prediksi(m_bagger);
        //
        //        } catch (Exception e) {
        //        }
//            else if (chk_knn.isSelected() && chk_svm.isSelected() && chk_bagging.isSelected()) {
//                try {
//                    Instances train = null;
//                    if (flNamePrePro == null) {
//                        train = new Instances(DataTrainPrePro());
//                    } else {
//                        train = new Instances(DataTrain());
//                    }
//                    ta_combine.append("******************************");
//                    ta_combine.append("\nProses KNN-SVM-Bagging");
//                    ta_combine.append("\n******************************");
//                    ta_combine.append("\n=========== Train Data ===========");
//                    ta_combine.append("\nJumlah train data: " + train.numInstances() + " intances");
//                    ta_combine.append("\nJumlah Attribut pada Train set " + train.numAttributes());
//                    ta_combine.append("\n=========== Test Data ===========");
//                    ta_combine.append("\nJumlah tes data: " + train.numInstances() + " intances");
//                    try {
//                        String a = "1";
//                        String b = "2";
//                        if (et_ord_svm.getText().toString().equals(a) && et_ord_knn.getText().toString().equals(b)) {
//                            SMO svm = new SMO();
//                            //instance train
//                            if (flNamePrePro == null) {
//                                train = new Instances(DataTrainPrePro());
//                            } else {
//                                train = new Instances(DataTrain());
//                            }
//                            train.setClassIndex(train.numAttributes() - 1);
//                            //svm.setOptions(option_svm);
//                            svm.buildClassifier(train);
//                            SerializationHelper s = new SerializationHelper();
//                            removeFile("ModelSVMKNNBagging.model");
//                            s.write("ModelSVMKNNBagging.model", svm);
//                            int nn = Integer.parseInt(et_knn_combine.getText().toString());
//                             wekaClassifier.setKNN(nn);
//                    NearestNeighbourSearch search = new LinearNNSearch();
//                    EuclideanDistance df = new EuclideanDistance();
//                    df.setDontNormalize(true);
//                    search.setDistanceFunction(df);
//                    search.setMeasurePerformance(false);
//                    wekaClassifier.setNearestNeighbourSearchAlgorithm(search);
//                    wekaClassifier.setDistanceWeighting(new SelectedTag(IBk.WEIGHT_NONE, IBk.TAGS_WEIGHTING));
//
//                            try {
//                                wekaClassifier.buildClassifier(train);
//                                //write into model
//
//                                Classifier c = new IBk();
//                                c = (Classifier) s.read("ModelSVMKNNBagging.model");
//                                c.buildClassifier(train);
//                                Evaluation evaluation = null;
//                                evaluation = new Evaluation(train);
//                                evaluation.evaluateModel(c, train);
//
//                                int bagging_sizeseed = Integer.parseInt(et_baggingSeed.getText().toString());
//                                int bagging_sizeboot = Integer.parseInt(et_baggingBoot.getText().toString());
//                                m_bagger.setClassifier(c);
//                                m_bagger.setSeed(bagging_sizeseed);
//                                m_bagger.setNumIterations(bagging_sizeboot);
//                                m_bagger.setCalcOutOfBag(true);
//                                m_bagger.buildClassifier(train);
//
//                                //print each bootsrap of data
//                                Evaluation eval = new Evaluation(train);
//                                eval.evaluateModel(m_bagger, train);
//                                ta_combine.append(eval.toSummaryString("\n ===Evaluasi SVM KNN BAGGING===", true));
//                                ta_combine.append(eval.toMatrixString());
//
//                                if (chk_redundant.isSelected() && !chk_feature.isSelected()) {
//                                    setNameFile("ResultSVM_KNN_Bagging_RR.txt", "\n" + eval.toSummaryString("\n ===Evaluasi ALGORITMA SVM_KNN_Bagging===", true), "\n" + eval.toMatrixString());
//                                }
//                                if (chk_feature.isSelected() && !chk_redundant.isSelected()) {
//                                    setNameFile("ResultSVM_KNN_Bagging_FS.txt", "\n" + eval.toSummaryString("\n ===Evaluasi ALGORITMA SVM_KNN_Bagging===", true), "\n" + eval.toMatrixString());
//                                }
//                                if (chk_redundant.isSelected() && chk_feature.isSelected()) {
//                                    setNameFile("ResultSVM_KNN_Bagging_RR_FS.txt", "\n" + eval.toSummaryString("\n ===Evaluasi ALGORITMA SVM_KNN_Bagging===", true), "\n" + eval.toMatrixString());
//                                }
//                                if (!chk_redundant.isSelected() && !chk_feature.isSelected()) {
//                                    setNameFile("ResultSVM_KNN_Bagging.txt", "\n" + eval.toSummaryString("\n ===Evaluasi ALGORITMA SVM_KNN_Bagging===", true), "\n" + eval.toMatrixString());
//                                }
//                                prediksi(m_bagger);
//
//                            } catch (Exception e) {
//                            }
//                        } else if (et_ord_knn.getText().toString().equals(a) && et_ord_svm.getText().toString().equals(b)) {
//                            int nn = Integer.parseInt(et_knn_combine.getText().toString());
//                            wekaClassifier.setKNN(nn);
//                            //instance train
//                            if (flNamePrePro == null) {
//                                train = new Instances(DataTrainPrePro());
//                            } else {
//                                train = new Instances(DataTrain());
//                            }
//                            train.setClassIndex(train.numAttributes() - 1);
//                            //svm.setOptions(option_svm);
//                            wekaClassifier.buildClassifier(train);
//                            SerializationHelper s = new SerializationHelper();
//                            removeFile("ModelKNNSVMBagging.model");
//                            s.write("ModelKNNSVMBagging.model", wekaClassifier);
//                            try {
//                                smo.buildClassifier(train);
//                                //write into model
//
//                                Classifier c = new SMO();
//                                c = (Classifier) s.read("ModelKNNSVMBagging.model");
//                                c.buildClassifier(train);
//                                Evaluation evaluation = null;
//                                evaluation = new Evaluation(train);
//                                evaluation.evaluateModel(c, train);
//
//                                int bagging_sizeseed = Integer.parseInt(et_baggingSeed.getText().toString());
//                                int bagging_sizeboot = Integer.parseInt(et_baggingBoot.getText().toString());
//                                m_bagger.setClassifier(c);
//                                m_bagger.setSeed(bagging_sizeseed);
//                                m_bagger.setNumIterations(bagging_sizeboot);
//                                m_bagger.setCalcOutOfBag(true);
//                                m_bagger.buildClassifier(train);
//
//                                //print each bootsrap of data
//                                Evaluation eval = new Evaluation(train);
//                                eval.evaluateModel(m_bagger, train);
//                                ta_combine.append(eval.toSummaryString("\n ===Evaluasi KNN SVM BAGGING===", true));
//                                ta_combine.append(eval.toMatrixString());
//
//                                if (chk_redundant.isSelected() && !chk_feature.isSelected()) {
//                                    setNameFile("ResultKNN_SVM_Bagging_RR.txt", "\n" + eval.toSummaryString("\n ===Evaluasi ALGORITMA KNN_SVM_Bagging===", true), "\n" + eval.toMatrixString());
//                                }
//                                if (chk_feature.isSelected() && !chk_redundant.isSelected()) {
//                                    setNameFile("ResultKNN_SVM_Bagging_FS.txt", "\n" + eval.toSummaryString("\n ===Evaluasi ALGORITMA KNN_SVM_Bagging===", true), "\n" + eval.toMatrixString());
//                                }
//                                if (chk_redundant.isSelected() && chk_feature.isSelected()) {
//                                    setNameFile("ResultKNN_SVM_Bagging_RR_FS.txt", "\n" + eval.toSummaryString("\n ===Evaluasi ALGORITMA KNN_SVM_Bagging===", true), "\n" + eval.toMatrixString());
//                                }
//                                if (!chk_redundant.isSelected() && !chk_feature.isSelected()) {
//                                    setNameFile("ResultKNN_SVM_Bagging.txt", "\n" + eval.toSummaryString("\n ===Evaluasi ALGORITMA KNN_SVM_Bagging===", true), "\n" + eval.toMatrixString());
//                                }
//                                //prediksi(m_bagger);
//
//                            } catch (Exception e) {
//                            }
//                        } else {
//                            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
//
//                            // show a joptionpane dialog using showMessageDialog
//                            JOptionPane.showMessageDialog(frame, "Angka Yang anda masukkan salah! Seharusnya 1 atau 2!");
//                            System.exit(0);
//                        }
//                    } catch (Exception e) {
//                    }
//
//                } catch (Exception e) {
//                }
//                long endtime = new Date().getTime();
//                ta_combine.append("\n Duration Time(Second): " + (endtime - starttime) / 1000);
//            }
    }
}//GEN-LAST:event_btn_Run_CombineActionPerformed
    
private void chk_svmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_svmActionPerformed
//    if (chk_svm.isSelected() == false) {
//        label_svm1.hide();
//        label_svm2.hide();
//        label_svm3.hide();
//        label_svm4.hide();
//        cb_tipekernel1.hide();
//        et_cost1.hide();
//        et_gamma1.hide();
//        et_koef1.hide();
//
//    } else {
//        label_svm1.show();
//        label_svm2.show();
//        label_svm3.show();
//        label_svm4.show();
//        cb_tipekernel1.show();
//        et_cost1.show();
//        et_gamma1.show();
//        et_koef1.show();
//    }
}//GEN-LAST:event_chk_svmActionPerformed
    
private void btn_Run_SvmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Run_SvmActionPerformed
    try {
        //ta_svm.setText("");
        FungsiSVM();
    } catch (IOException ex) {
        ex.printStackTrace();
    }
}//GEN-LAST:event_btn_Run_SvmActionPerformed
    
private void btn_Run_KnnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Run_KnnActionPerformed
    
    ta_knn.setText("");
    try {
        FungsiKNN(ta_knn);
    } catch (IOException ex) {
        ex.printStackTrace();
    }
}//GEN-LAST:event_btn_Run_KnnActionPerformed
    
private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
    chk_feature.setEnabled(true);
    System.out.println("Enable the Check Box..");
    chk_redundant.setEnabled(true);
    chk_feature.setSelected(false);
    chk_redundant.setSelected(false);
}//GEN-LAST:event_btn_refreshActionPerformed
    
private void et_testActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_et_testActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_et_testActionPerformed
    
private void btn_browsetestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_browsetestActionPerformed
    chooseFile(et_test);
}//GEN-LAST:event_btn_browsetestActionPerformed
    
private void btn_preprocessingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_preprocessingActionPerformed
    String cb1 = "....";
    String etfl = "(train set)";
    String ettest = "(test set)";
    
    if (et_filename.getText().toString().equals(etfl)) {
        JFrame frame = new JFrame("JOptionPane showMessageDialog example");
        JOptionPane.showMessageDialog(frame, "Anda harus memilih file data train!");
        
    } else if (et_test.getText().toString().equals(ettest)) {
        JFrame frame = new JFrame("JOptionPane showMessageDialog example");
        JOptionPane.showMessageDialog(frame, "Anda harus memilih file data test!");
        
        
    } else if (chk_feature.isSelected() == false && chk_redundant.isSelected() == false) {
        JFrame frame = new JFrame("JOptionPane showMessageDialog example");
        JOptionPane.showMessageDialog(frame, "Anda harus memilih salah satu tipe preprocessing!");
    } else {
        BufferedReader reader1 = null;
        try {
            reader1 = new BufferedReader(new FileReader(et_test.getText().toString()));
            
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
        String liner = "";
        int i = 0;
        
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new FileReader(et_filename.getText().toString()));
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
        String line = "";
        int il = 0;
        
        if (DataTrain().instance(1).toString().endsWith("?")) {
            
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame, "File Data Train tidak dapat diproses karena nilai kelas label salah!!");


//            while ((liner = reader1.readLine()) != null) {
//                if (!liner.endsWith("?")) {
//                    while ((liner = reader1.readLine()) != null) {
//                        i++;
//                    }
//                }
//            }
        } else if (!DataTest().instance(1).toString().endsWith("?")) {
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame, "File Data Test tidak dapat diproses karena nilai kelas label salah!!");



//        try {
//            while ((line = reader.readLine()) != null) {
//                if (line.endsWith("?")) {
//                    while ((line = reader.readLine()) != null) {
//                        il++;
//                    }
//                }
//            }
//        } catch (IOException ex) {
//            ex.printStackTrace();
//        }

//        if (i > 1 || il > 1) {
//
//            if (il > 1) {
//                    JFrame frame = new JFrame("JOptionPane showMessageDialog example");
//                    JOptionPane.showMessageDialog(frame, "File tidak dapat diproses karena nilai kelas label salah!!");
//                }
        } else {

//            if (chk_redundant.isSelected() && chk_feature.isSelected()) {
//                try {
//                    String FL_Rem_Red = "FileRR.arff";
//                    stripDuplicatesFromFile(et_filename.getText().toString(), FL_Rem_Red);
//                } catch (FileNotFoundException ex) {
//                    ex.printStackTrace();
//                } catch (IOException ex) {
//                    ex.printStackTrace();
//                }
//                String File_FS_RR = "File_FS_RR.arff";
//                try {
//                    removeFile(File_FS_RR);
//                } catch (IOException ex) {
//                    ex.printStackTrace();
//                }
//                try {
//                    featureSelection(DataTrainAfterRemoveRedundant(), File_FS_RR);
//                    flNamePrePro = File_FS_RR;
//                } catch (FileNotFoundException ex) {
//                    ex.printStackTrace();
//                }
//                try {
//                    removeFile("FileRR.arff");
//                } catch (IOException ex) {
//                    ex.printStackTrace();
//                }
//                chk_feature.setEnabled(false);
//                chk_redundant.setEnabled(false);
//            } else 
            if (chk_feature.isSelected()) {
                chk_redundant.setEnabled(false);
                String file_Fs = "featureSelection.arff";
                try {
                    removeFile(file_Fs);
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
                featureSelection(DataTrain(), file_Fs);
                flNamePrePro = file_Fs;
                //chk_feature.setEnabled(false);
            } else if (chk_redundant.isSelected()) {
                //chk_feature.setEnabled(false);
                try {
                    String FileRR = "FileRemoveRedundant.arff";
                    removeFile(FileRR);
//                    File f = null;
//        boolean bool = false;
//        SerializationHelper serial = new SerializationHelper();
//        
//            // create new files
//            f = new File("featureSelection.arff");
//
//            bool = f.exists();
//            // prints
//            System.out.println("File exists: " + bool);
//
//            if (bool == true) {
                    stripDuplicatesFromFile(et_filename.getText().toString(), FileRR);
//            }

                    flNamePrePro = FileRR;
                } catch (FileNotFoundException ex) {
                    ex.printStackTrace();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
                chk_feature.setEnabled(false);
            }
        }
    }
}//GEN-LAST:event_btn_preprocessingActionPerformed
    
private void chk_redundantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_redundantActionPerformed
    if (chk_redundant.isSelected() == true) {
        chk_redundant.setEnabled(false);
        chk_feature.setEnabled(false);
    }
}//GEN-LAST:event_chk_redundantActionPerformed
    
private void et_filenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_et_filenameActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_et_filenameActionPerformed
    
private void btn_browsetrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_browsetrainActionPerformed
    chooseFile(et_filename);
}//GEN-LAST:event_btn_browsetrainActionPerformed
    
private void chk_featureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_featureActionPerformed
    if (chk_feature.isSelected() == true) {
        chk_redundant.setEnabled(false);
        chk_feature.setEnabled(false);
        
    }
}//GEN-LAST:event_chk_featureActionPerformed

//    private void btnInputActionPerformed(java.awt.event.ActionEvent evt) {
//        int counter = 0;
//        String[] number = null;
//        number[counter] = edt_knn.getText();
//        counter = counter + 1;
//        lbl_knn.setText(" Your Number Was Added"+counter);
//    }
    private void jButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int counter = 0;
        counter++;
        for (int u = 0; u < counter; u++) {
            lbl_knn.setText(lbl_knn.getText() + edt_knn.getText() + "  ");
            lbl_svm.setText(lbl_svm.getText() + edt_svm.getText() + "  ");
            lbl_knnSvm.setText(lbl_knnSvm.getText() + edt_knnSvm.getText() + "  ");
            lbl_svmKnn.setText(lbl_svmKnn.getText() + edt_svmKnn.getText() + "  ");
        }
    }
    
private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:

    jButtonActionPerformed(evt);


//
//    int counter =0;
//    if (evt.getSource() == jButton1) {
//			counter++;
//			lbl_knn.setText("" + counter);
//		}
//		else {
//			counter--;
//			lbl_knn.setText("" + counter);
//		}
//    ArrayList p = new ArrayList();
//    String knn1 = "";
//    knn1 = edt_knn.getText().toString() + "\n";
//    p.add(knn1);
//    String svm1 = "";
//    svm1 += edt_svm.getText().toString() + "\n";
//    String knnSvm1 = "";
//    knnSvm1 += edt_svmKnn.getText().toString() + "\n";
//    String svmKnn1 = "";
//    svmKnn1 += edt_knnSvm.getText() + "\n";
//
//    
//    for (int u = 0; u < p.size(); u++) {
//        lbl_knn.setText(p.get(u).toString());
//    }
//    lbl_svm.setText(v+"");
//    lbl_svmKnn.setText(knnSvm1);
//    lbl_knnSvm.setText(svmKnn1);
}//GEN-LAST:event_jButton1ActionPerformed
    
private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    // TODO add your handling code here:
    double knn = 0, svm = 0, knnsvm = 0, svmknn = 0;
    String strknn = "", strsvm = "", strknnsvm = "", strsvmknn = "";
    strknn = edt_knn.getText().toString();
    strsvm = edt_svm.getText().toString();
    strknnsvm = edt_knnSvm.getText().toString();
    strsvmknn = edt_svmKnn.getText().toString();
    
    knn = Double.parseDouble(edt_knn.getText().toString());
    svm = Double.parseDouble(edt_svm.getText().toString());
    knnsvm = Double.parseDouble(edt_knnSvm.getText().toString());
    svmknn = Double.parseDouble(edt_svmKnn.getText().toString());
    
    if (knn > 100 || svm > 100 || knnsvm > 100 || svmknn > 100) {
        System.out.println("Data yang anda masukkan tidak boleh lebih dari 100!");
        ta_stat.setText("Data yang anda masukkan tidak boleh lebih dari 100!");
    } else if (edt_knn.getText().isEmpty() || edt_svm.getText().isEmpty() || edt_knnSvm.getText().isEmpty() || edt_svmKnn.getText().isEmpty()) {
        System.out.println("masukan tidak boleh kosong!");
        ta_stat.setText("masukan tidak boleh kosong!");
    } else {
        ArrayList k = new ArrayList();
        ArrayList max = new ArrayList();
        ArrayList getMax = new ArrayList();
        
        System.out.println("--------------------------KNN ALGORITHM---------------------------------------");
        ta_stat.append("\n" + "--------------------------KNN ALGORITHM---------------------------------------");
        ArrayList<Double> dList = new ArrayList<Double>(tbl_freq(lbl_knn).length);
        for (double d : tbl_freq(lbl_knn)) {
            dList.add(d);
        }
        
//        for(int yo=0;yo<dList.size();yo++)
//        {
//            if(dList.get(yo).equals(dList.get(yo)))
//            {
//                System.out.println("sama coy");
//                System.out.println("Data yang paling sering muncul pada interval "+dList.get(0)+" - "+dList.get(0)+" dengan jumlah: "+dList.size());
//                ta_stat.setText("Data yang paling sering muncul pada interval "+dList.get(0)+" - "+dList.get(0)+" dengan jumlah: "+dList.size());
//            }
//            else
//            {
//                k.add(table_frequency.table_frequency1(tbl_freq(lbl_knn), 10, ta_stat));
//            }
//        }
//        System.out.println("--------------------------SVM ALGORITHM---------------------------------------");
//        ta_stat.append("\n" + "--------------------------SVM ALGORITHM---------------------------------------");
//        ArrayList<Double> dList1 = new ArrayList<Double>(tbl_freq(lbl_svm).length);
//        for (double d : tbl_freq(lbl_svm)) {
//            dList1.add(d);
//        }
//        System.out.println("okeee:"+dList1);
//        for(int yo=0;yo<dList1.size();yo++)
//        {
//            if(dList1.get(yo).equals(dList1.get(yo)))
//            {
//                System.out.println("sama coy");
//                System.out.println("Data yang paling sering muncul pada interval "+dList1.get(0)+" - "+dList1.get(0)+" dengan jumlah: "+dList1.size());
//                ta_stat.setText("Data yang paling sering muncul pada interval "+dList1.get(0)+" - "+dList1.get(0)+" dengan jumlah: "+dList1.size());
//            }
//            else
//            {
//                k.add(table_frequency.table_frequency1(tbl_freq(lbl_svm), 10, ta_stat));
//           }
//        }
//        
//        
//        System.out.println("--------------------------KNN SVM ALGORITHM---------------------------------------");
//        ta_stat.append("\n" + "--------------------------KNN SVM ALGORITHM---------------------------------------");
//                ArrayList<Double> dList2 = new ArrayList<Double>(tbl_freq(lbl_knnSvm).length);
//        for (double d : tbl_freq(lbl_knnSvm)) {
//            dList2.add(d);
//        }
//        System.out.println("okeee:"+dList2);
//        for(int yo=0;yo<dList2.size();yo++)
//        {
//            if(dList2.get(yo).equals(dList2.get(yo)))
//            {
//                System.out.println("sama coy");
//                System.out.println("Data yang paling sering muncul pada interval "+dList2.get(0)+" - "+dList2.get(0)+" dengan jumlah: "+dList2.size());
//                ta_stat.setText("Data yang paling sering muncul pada interval "+dList2.get(0)+" - "+dList2.get(0)+" dengan jumlah: "+dList2.size());
//            }
//            else
//            {
//               k.add(table_frequency.table_frequency1(tbl_freq(lbl_knnSvm), 10, ta_stat));     
//           }
//        }
//        
//        
//        System.out.println("--------------------------SVM KNN ALGORITHM---------------------------------------");
//        ta_stat.append("\n" + "--------------------------SVM KNN ALGORITHM---------------------------------------");
//                      ArrayList<Double> dList3 = new ArrayList<Double>(tbl_freq(lbl_svmKnn).length);
//        for (double d : tbl_freq(lbl_svmKnn)) {
//            dList3.add(d);
//        }
//        System.out.println("okeee:"+dList3);
//        for(int yo=0;yo<dList3.size();yo++)
//        {
//            if(dList3.get(yo).equals(dList3.get(yo)))
//            {
//                System.out.println("sama coy");
//                System.out.println("Data yang paling sering muncul pada interval "+dList3.get(0)+" - "+dList3.get(0)+" dengan jumlah: "+dList3.size());
//                ta_stat.setText("Data yang paling sering muncul pada interval "+dList3.get(0)+" - "+dList3.get(0)+" dengan jumlah: "+dList3.size());
//            }
//            else
//            {
//               k.add(table_frequency.table_frequency1(tbl_freq(lbl_svmKnn), 10, ta_stat));   
//           }
//        }  
        System.out.println("--------------------------KNN ALGORITHM---------------------------------------");
        ta_stat.append("\n" + "--------------------------KNN ALGORITHM---------------------------------------");
        k.add(table_frequency.table_frequency1(tbl_freq(lbl_knn), 10, ta_stat));
        
        System.out.println("--------------------------SVM ALGORITHM---------------------------------------");
        ta_stat.append("\n" + "--------------------------SVM ALGORITHM---------------------------------------");
        k.add(table_frequency.table_frequency1(tbl_freq(lbl_svm), 10, ta_stat));
        
        System.out.println("--------------------------SVM KNN ALGORITHM---------------------------------------");
        ta_stat.append("\n" + "--------------------------SVM KNN ALGORITHM---------------------------------------");
        k.add(table_frequency.table_frequency1(tbl_freq(lbl_svmKnn), 10, ta_stat));
        
        System.out.println("--------------------------KNN SVM ALGORITHM---------------------------------------");
        ta_stat.append("\n" + "--------------------------KNN SVM ALGORITHM---------------------------------------");
        k.add(table_frequency.table_frequency1(tbl_freq(lbl_knnSvm), 10, ta_stat));
        
        
        System.out.println("Candidate of Interval:" + k);
        ta_stat.append("\n" + "Candidate of Interval:" + k);
        table_frequency.checkDuplicate(k, ta_stat);
        
        for (int uy = 0; uy < k.size(); uy++) {
            String ju = k.get(uy).toString();
            String ju1 = ju.substring(ju.length() - 2, ju.length() - 1);
            max.add(ju1);
            final double before = Double.parseDouble(ju.split("-")[0].substring(1)); // "Before"
            final String after = ju.split("-")[1]; // "After"

            getMax.add(before);
//        System.out.println("before: " + before);
//        System.out.println("after: " + after1);

        }
        System.out.println("\nThe max total of Interval: " + Collections.max(max));
        ta_stat.append("\n" + "\nThe max total of Interval: " + Collections.max(max));
        String komax = "";
        String io = "";
        komax = Collections.max(max).toString();
            io = Collections.max(getMax).toString();
            
            if (k.get(0).toString().contains("=" + komax) && k.get(0).toString().contains(io)) {
                System.out.println("KNN ALGORITHM:" + k.get(0));
                ta_stat.append("\n" + "KNN ALGORITHM:" + k.get(0));
            } else if (k.get(1).toString().contains("=" + komax) && k.get(1).toString().contains(io)) {
                System.out.println("SVM ALGORITHM:" + k.get(1));
                ta_stat.append("\n" + "SVM ALGORITHM:" + k.get(1));
            } else if (k.get(2).toString().contains("=" + komax) && k.get(2).toString().contains(io)) {
                System.out.println("KNN SVM ALGORITHM:" + k.get(2));
                ta_stat.append("\n" + "KNN SVM ALGORITHM:" + k.get(2));
            } else if (k.get(3).toString().contains("=" + komax) && k.get(3).toString().contains(io)) {
                System.out.println("SVM KNN ALGORITHM:" + k.get(3));
                ta_stat.append("\n" + "SVM KNN ALGORITHM:" + k.get(3));
            }
        }
    
}//GEN-LAST:event_jButton2ActionPerformed
    
    public double[] tbl_freq(JLabel lbl) {
        String ho = lbl.getText().toString();
        String ko[] = ho.split("  ");
        
        double[] array = null;
        double dArr[] = null;
        String[] ls;
        
        ls = lbl.getText().toString().split("  ");
        double[] bb = new double[ls.length * 2];
        for (int i = 0; i < ls.length; i++) {
            double d = Double.parseDouble(ls[i]);
            bb[i] = d;
            System.out.println(bb[i]);
        }
        dArr = bb;
        double[] nonZeroArr = dArr;
        
        Arrays.sort(nonZeroArr);
        int index = -1;
        while ((index = Arrays.binarySearch(nonZeroArr, 0.0)) > -1) {
            double[] newArr = new double[nonZeroArr.length - index - 1];
            System.arraycopy(nonZeroArr, index + 1, newArr, 0, newArr.length);
            nonZeroArr = newArr;
        }
        for (double d : nonZeroArr) {
            System.out.println("\nnonzero: " + d + ",");
            //ta_stat.append("\nnonzero: " + d + ",");
        }
        
        return nonZeroArr;
    }
    
    private void chooseFile(JTextField a) {
        JFileChooser fileChooser = new JFileChooser();
        //fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(true);
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("arff File", "arff"));
        int result = fileChooser.showOpenDialog(this);
        
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String s = selectedFile.getName();
            String ext = null;
            String extFile = "arff";
            int i = s.lastIndexOf('.');
            if (i > 0 && i < s.length() - 1) {
                ext = s.substring(i + 1).toLowerCase();
                if (!ext.equals(extFile)) {
                    JFrame frame = new JFrame("JOptionPane showMessageDialog example");
                    JOptionPane.showMessageDialog(frame, "The Extension of File is not arff!");
                } else {
                    a.setText(selectedFile.getAbsolutePath());
                    a.setEditable(false);
                    System.out.println("Select File");
                    System.out.println("Selected file: " + selectedFile.getAbsolutePath());
                }
            }
        }
    }
    
    public int[] featureSelection(Instances data, String FileNM) {
        
        int[] indexes = null;
        
        AttributeSelection attsel = new AttributeSelection();
        GainRatioAttributeEval eval = new GainRatioAttributeEval();
        Ranker search = new Ranker();
        attsel.setEvaluator(eval);
        attsel.setSearch(search);
        int yii = 0;
        System.out.println("Ranking all atributes..");
        try {
            attsel.SelectAttributes(data);
            indexes = attsel.selectedAttributes();
            System.out.println("index::" + Utils.arrayToString(indexes));
//            if(Utils.arrayToString(indexes).toString().contains(",")){
//                yii++;
//            }
            String[] array = attsel.toResultsString().split("\n", -1);
            String[] array1 = Utils.arrayToString(indexes).split(",");
            System.out.println("yiii" + array1[15]);
            
            System.out.println(attsel.toResultsString());
            ta_fs.append("=== Attribute Selection on all input data ==="
                    + "\n" + "\n"
                    + "Search Method: Attribute ranking."
                    + "\n"
                    + "Attribute Evaluator (supervised, Class (nominal): 42 label):"
                    + "Gain Ratio feature evaluator " + "\n");
            
            ta_fs.append("\n" + "Count of selected attributes are 16 label.");
            ta_fs.append(" Selected Attributes: \n");
            
            Instances is = new Instances(data);
            String strDel = ",";
            String yo = "";
            String yo1 = "";
            
            for (int ini = 0; ini < 16; ini++) {
                if (ini > 0) {
                    System.out.print(strDel);
                }
                
                if (array1[ini].equals("0")) {
                    array1[ini]=array1[16];
                    
                } else {
                    //yo1 = yo;
                    array1[ini]=array1[ini];
                }
                yo1=array1[ini];
                    System.out.print("yaa elahkol"+yo1);
                
                
                
            }
            
            System.out.print("yo1:" + yo1);
            String[] opts = new String[]{"-R", yo1};
            //create a Remove object (this is the filter class)
            Remove remove = new Remove();
            //set the filter options
            remove.setOptions(opts);
            //pass the dataset to the filter
            remove.setInputFormat(is);
            //apply the filter
            Instances newData = Filter.useFilter(is, remove);

            //now save the dataset to a new file as we learned before
            ArffSaver saver = new ArffSaver();
            saver.setInstances(newData);
            saver.setFile(new File(FileNM));
            saver.writeBatch();
            
            System.out.println("\n\nSelected 16 atributes:\n ");
            for (int x = 11; x <= 27; x++) {
                System.out.println(array[x] + "\n");
                ta_fs.append(array[x] + "\n");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return indexes;
    }
    
    public void removeFile(String FlName) throws IOException {
        boolean success = (new File(FlName)).delete();
        if (success) {
            System.out.println("The file has been successfully deleted");
        }
    }
    
    public static BufferedReader readDataFile(String filename) {
        BufferedReader inputReader = null;
        try {
            inputReader = new BufferedReader(new FileReader(filename));
        } catch (FileNotFoundException ex) {
            System.err.println("File not found: " + filename);
        }
        return inputReader;
    }
    
    public Instances DataTrainPrePro() throws FileNotFoundException {
        Instances train = null;
        BufferedReader datafile = new BufferedReader(new FileReader(flNamePrePro));
        try {
            //instance train
            train = new Instances(datafile);
            train.setClassIndex(train.numAttributes() - 1);
            
        } catch (Exception e) {
        }
        return train;
    }
    
    public Instances DataTrain() {
        Instances train = null;
        BufferedReader datafile = readDataFile(et_filename.getText());//train
        try {
            //instance train
            train = new Instances(datafile);
            train.setClassIndex(train.numAttributes() - 1);
            
        } catch (Exception e) {
        }
        return train;
    }
    
    public Instances DataTrainAfterRemoveRedundant() throws FileNotFoundException {
        Instances train = null;
        BufferedReader datafile = new BufferedReader(new FileReader("FileRR.arff"));
        try {
            //instance train
            train = new Instances(datafile);
            train.setClassIndex(train.numAttributes() - 1);
            
        } catch (Exception e) {
        }
        return train;
    }
    
    public Instances DataTest() {
        Instances unlabeled = null;
        System.out.println("Read test.arff");
        BufferedReader datafile = readDataFile(et_test.getText());//train
        try {
            //instance train
            unlabeled = new Instances(datafile);
            unlabeled.setClassIndex(unlabeled.numAttributes() - 1);
            
        } catch (Exception e) {
        }
        
        return unlabeled;
    }
    
    public void prediksi(Classifier c, String title) {
        //predictions
        //print all actual and predicted
        //for train set
        Instances train = DataTrain();
        Instances test = DataTest();
        try {
            System.out.println("#\t actual\t predicted \t miss_predicted");
            ta_prediction.append("#\t actual\t predicted \t miss_predicted");
            for (int j = 0; j < train.numInstances(); j++) {
                double prediksi = c.classifyInstance(train.instance(j));
                double actual = train.instance(j).classValue();
                
                System.out.print((j + 1));
                ta_prediction.append("" + (j + 1));
                
                System.out.print("\t" + train.classAttribute().value((int) actual));
                ta_prediction.append("\t" + train.classAttribute().value((int) actual));
                
                System.out.print("\t" + train.classAttribute().value((int) prediksi));
                ta_prediction.append("\t" + train.classAttribute().value((int) prediksi));
                //print misspredicted
                if (prediksi != actual) {
                    System.out.print("\t mis_predicted \t");
                    ta_prediction.append("\t mis_predicted \t");
                    
                    System.out.print(train.instance(j));
                    ta_prediction.append("" + train.instance(j));
                }
                System.out.println();
                ta_prediction.append("\n");
            }
            //for test set 
            //print into arff
            //print in command line and gui
            ta_prediction.append("Hasil Prediksi \n");
            for (int i = 0; i < test.numInstances(); i++) {
                double labeel = c.classifyInstance(test.instance(i));
                test.instance(i).setClassValue(labeel);
                System.out.println(test.instance(i));
                ta_prediction.append("\n" + test.instance(i).toString());
            }
            
            BufferedWriter writer = new BufferedWriter(new FileWriter("Prediksi" + title + ".arff"));
            writer.write(test.toString());
            writer.newLine();
            writer.flush();
            writer.close();
            System.out.println("Finish predicting");
        } catch (Exception e) {
        }
    }
    
    public void FungsiKNN(JTextArea ta) throws IOException {
        long starttime = new Date().getTime();
        String cb1 = "....";
        String etfl = "(train set)";
        String ettest = "(test set)";
        
        if (et_filename.getText().toString().equals(etfl)) {
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame, "Anda harus memilih file data train!");
            
        } else if (et_test.getText().toString().equals(ettest)) {
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame, "Anda harus memilih file data test!");
            
        } else {
            
            BufferedReader reader1 = null;
            try {
                reader1 = new BufferedReader(new FileReader(et_test.getText().toString()));
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            }
            String liner = "";
            int i = 0;
            
            BufferedReader reader = null;
            try {
                reader = new BufferedReader(new FileReader(et_filename.getText().toString()));
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            }
            String line = "";
            int il = 0;
            Instances train = null;
            //instance train
            if (flNamePrePro == null) {
                train = new Instances(DataTrainPrePro());
            } else {
                train = new Instances(DataTrain());
            }
            train.setClassIndex(train.numAttributes() - 1);
            
            if (train.instance(1).toString().endsWith("?")) {
                JFrame frame = new JFrame("JOptionPane showMessageDialog example");
                JOptionPane.showMessageDialog(frame, "File Data Train tidak dapat diproses karena nilai kelas label salah!!");
                
            } else if (!DataTest().instance(1).toString().endsWith("?")) {
                JFrame frame = new JFrame("JOptionPane showMessageDialog example");
                JOptionPane.showMessageDialog(frame, "File Data Test tidak dapat diproses karena nilai kelas label salah!!");
                
            } else {
                
                try {
                    
                    int nn = Integer.parseInt(et_knn.getText().toString());
//                    IBk ibk = new IBk();
//                    ibk.setKNN(nn);

                    
                    wekaClassifier.setKNN(nn);
                    NearestNeighbourSearch search = new LinearNNSearch();
                    EuclideanDistance df = new EuclideanDistance();
                    df.setDontNormalize(true);
                    search.setDistanceFunction(df);
                    search.setMeasurePerformance(false);
                    wekaClassifier.setNearestNeighbourSearchAlgorithm(search);
                    wekaClassifier.setDistanceWeighting(new SelectedTag(IBk.WEIGHT_NONE, IBk.TAGS_WEIGHTING));
                    
                    System.out.println("Set Size KNN:" + nn);
                    try {
                        wekaClassifier.buildClassifier(train);
                        //write into model
                        System.out.println("Writing to file model..");
                        SerializationHelper serialization = new SerializationHelper();
                        serialization.write("ModelKNN.model", wekaClassifier);
                        System.out.println("\n\nThe file model has been succesfully created");
                        //evaluation
                        Evaluation eval_knn = new Evaluation(train);
                        eval_knn.evaluateModel(wekaClassifier, train);
                        double misclassificationRate = eval_knn.errorRate();
                        System.out.println("Misclassification Rate " + misclassificationRate);
                        ta.append("\n" + eval_knn.toSummaryString("\n ===Evaluasi ALGORITMA KNN===", true));
                        ta.append("\n" + eval_knn.toMatrixString());
                        if (chk_redundant.isSelected() && !chk_feature.isSelected()) {
                            setNameFile("ResultKNN_RR.txt", "\n" + eval_knn.toSummaryString("\n ===Evaluasi ALGORITMA KNN===", true), "\n" + eval_knn.toMatrixString(), train);
                        }
                        if (chk_feature.isSelected() && !chk_redundant.isSelected()) {
                            setNameFile("ResultKNN_FS.txt", "\n" + eval_knn.toSummaryString("\n ===Evaluasi ALGORITMA KNN===", true), "\n" + eval_knn.toMatrixString(), train);
                        }
                        if (chk_redundant.isSelected() && chk_feature.isSelected()) {
                            setNameFile("ResultKNN_RR_FS.txt", "\n" + eval_knn.toSummaryString("\n ===Evaluasi ALGORITMA KNN===", true), "\n" + eval_knn.toMatrixString(), train);
                        }
                        if (!chk_redundant.isSelected() && !chk_feature.isSelected()) {
                            setNameFile("ResultKNN.txt", "\n" + eval_knn.toSummaryString("\n ===Evaluasi ALGORITMA KNN===", true), "\n" + eval_knn.toMatrixString(), train);
                        }
                        prediksi(wekaClassifier, "_AlgoritmaKNN");
                    } catch (Exception e) {
                    }
                } catch (Exception e) {
                }
                long endtime = new Date().getTime();
                ta.append("\n Duration Time(Second): " + (endtime - starttime) / 1000);
            }
        }
    }

    //to remove data redundant from arff file
    public void stripDuplicatesFromFile1(String filename, String FileRR) throws FileNotFoundException, IOException {
        BufferedReader reader = new BufferedReader(new FileReader(filename));
        Set<String> lines = new LinkedHashSet<String>();
        String line, line1 = null;
        String delims = " ";
        int count = 0;
        System.out.println("Read the duplicate contents now and writing to file");
        BufferedWriter writer = new BufferedWriter(new FileWriter(FileRR));
        for (int a = 0; a < 151; a++) {
            line1 = reader.readLine() + "\n";
            writer.write(line1);
        }
        writer.close();
        while ((line = reader.readLine()) != null) {
            count++;
            
            for (int i = 152; i < count; i++) {
                while ((line = reader.readLine()) != null) {
                    
                    line = line.trim();
                    StringTokenizer str = new StringTokenizer(line, delims);
                    
                    while (str.hasMoreElements()) {
                        line = (String) str.nextElement();
                        lines.add(line);
                        
                        BufferedReader reader1 = new BufferedReader(new FileReader(FileRR));
                        Set<String> linesr = new LinkedHashSet<String>();
                        String liner = null;
                        String delimsr = " ";
                        int countr = 0;
                        System.out.println("NEXT2 Read the duplicate contents now and writing to file");
                        
                        while ((liner = reader1.readLine()) != null) {
                            countr++;
                            System.out.println("matches1" + countr);
                            if (count == 151) {
                                liner = reader1.readLine() + "\n";
                                writer.write(line1);
                                
                                System.out.println("matches");
                                writer.append("ini" + "\n");
                                
                                for (String unique : lines) {
                                    liner = reader1.readLine() + "\n";
                                    writer.append(unique + "\n");
                                }
                                reader1.close();
                            }
                        }
                    }
                }
                reader.close();
            }
        }
        
        
        
        writer.close();
        
        
    }

    //to remove data redundant from arff file
    public void stripDuplicatesFromFile(String filename, String FileRR) throws FileNotFoundException, IOException {
        BufferedReader reader = new BufferedReader(new FileReader(filename));
        Set<String> lines = new LinkedHashSet<String>();
        String line, line1 = null;
        String delims = " ";
        int count = 0;
        System.out.println("Read the duplicate contents now");
        
        line = reader.readLine();
        String att = "%Data set for KDD Cup 1999" + "\n";
        
        if (reader != null) {
            
            for (int a = -1; a < 152; a++) {
                line1 = reader.readLine();
                att += line1 + "\n";
                
            }
            System.out.println("Writing to file..");
            while ((line = reader.readLine()) != null) {
                count++;

//                for (int i = line.startsWith(0); i < count; i++) {
                if (line.startsWith("0")) {
                    while ((line = reader.readLine()) != null) {
                        
                        line = line.trim();
                        StringTokenizer str = new StringTokenizer(line, delims);
                        
                        while (str.hasMoreElements()) {
                            line = (String) str.nextElement();
                            lines.add(line);
                            BufferedWriter writer = new BufferedWriter(new FileWriter(FileRR));
                            
                            writer.write(att);
                            for (String unique : lines) {
                                unique.split("\"");
                                writer.append(unique + "\n");
                                //now save the dataset to a new file as we learned before
                            }
                            writer.close();
                            
                        }
                    }
                }
            }
            System.out.println("The file has been successfully created");
        }
    }
    
    public void stripDuplicates(String filename, String fl, BufferedWriter bwrite) throws FileNotFoundException, IOException {
        BufferedReader reader = new BufferedReader(new FileReader(filename));
        Set<String> lines = new LinkedHashSet<String>();
        String line, line1 = null;
        String delims = " ";
        int count = 0;
        System.out.println("NEXT Read the duplicate contents now and writing to file");
        
        while ((line = reader.readLine()) != null) {
            count++;
            
            for (int i = 152; i < count; i++) {
                while ((line = reader.readLine()) != null) {
                    
                    line = line.trim();
                    StringTokenizer str = new StringTokenizer(line, delims);
                    
                    while (str.hasMoreElements()) {
                        line = (String) str.nextElement();
                        lines.add(line);
                        
                        BufferedReader reader1 = new BufferedReader(new FileReader(fl));
                        Set<String> linesr = new LinkedHashSet<String>();
                        String liner, line1r = null;
                        String delimsr = " ";
                        int countr = 0;
                        System.out.println("NEXT2 Read the duplicate contents now and writing to file");
                        
                        while ((liner = reader.readLine()) != null) {
                            countr++;
                            
                            if (countr > 151) {
                                System.out.println("matches");
                                bwrite.append("ini" + "\n");
                                
                                for (String unique : linesr) {
                                    liner = reader.readLine() + "\n";
                                    // bwrite.append(unique + "\n");
                                }
                                reader1.close();
                            }
                        }
                    }
                }
            }
        }
    }
    
    public void FungsiSVM() throws IOException {
        long starttime = new Date().getTime();
        String etfl = "(train set)";
        String ettest = "(test set)";
        String ksg = "";
        
        if (et_filename.getText().toString().equals(etfl)) {
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame, "Anda harus memilih file data train!");
            
        } else if (et_test.getText().toString().equals(ettest)) {
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame, "Anda harus memilih file data test!");
        } else if (et_gamma.getText().toString().equals(ksg) || et_gamma.getText().toString().contains("-")) {
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame, "Parameter yang anda masukkan tidak boleh kosong atau <0!");
        } else {
            BufferedReader reader1 = null;
            try {
                reader1 = new BufferedReader(new FileReader(et_test.getText().toString()));
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            }
            String liner = "";
            int i = 0;
            
            BufferedReader reader = null;
            try {
                reader = new BufferedReader(new FileReader(et_filename.getText().toString()));
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            }
            String line = "";
            int il = 0;
            Instances train = null;
            
            
            if (flNamePrePro == null) {
                train = new Instances(DataTrainPrePro());
            } else {
                train = new Instances(DataTrain());
            }
            if (train.instance(1).toString().endsWith("?")) {
                JFrame frame = new JFrame("JOptionPane showMessageDialog example");
                JOptionPane.showMessageDialog(frame, "File Data Train tidak dapat diproses karena nilai kelas label salah!!");
                
            } else if (!DataTest().instance(1).toString().endsWith("?")) {
                JFrame frame = new JFrame("JOptionPane showMessageDialog example");
                JOptionPane.showMessageDialog(frame, "File Data Test tidak dapat diproses karena nilai kelas label salah!!");
            } else {
                LibSVM libsvm = new LibSVM();
                try {
                    
                    String[] option_svm = new String[]{"-S", "0",
                        "-K", "2",
                        "-D", "3",
                        "-G", "" + et_gamma.getText().toString(),
                        "-R", "0",
                        "-N", "0.5",
                        "-M", "40.0",
                        "-C", "0",
                        "-E", "0.001",
                        "-P", "0.1",
                        "-W", "1"};
                    //instance train
                    train.setClassIndex(train.numAttributes() - 1);
                    //svm.setOptions(option_svm);
                    libsvm.buildClassifier(train);
                    //evaluation
                    Evaluation eval_svm = new Evaluation(train);
                    
                    eval_svm.crossValidateModel(libsvm, train, 10, new Random(1));
                    ta_svm.append("\n" + eval_svm.toSummaryString("\n ===Evaluasi ALGORITMA SVM===", true));
                    ta_svm.append("\n" + eval_svm.toMatrixString());
                    if (chk_redundant.isSelected() && !chk_feature.isSelected()) {
                        setNameFile("ResultSVM_RR.txt", "\n" + eval_svm.toSummaryString("\n ===Evaluasi ALGORITMA SVM===", true), "\n" + eval_svm.toMatrixString(), train);
                    }
                    if (chk_feature.isSelected() && !chk_redundant.isSelected()) {
                        setNameFile("ResultSVM_FS.txt", "\n" + eval_svm.toSummaryString("\n ===Evaluasi ALGORITMA SVM===", true), "\n" + eval_svm.toMatrixString(), train);
                    }
                    if (chk_redundant.isSelected() && chk_feature.isSelected()) {
                        setNameFile("ResultSVM_RR_FS.txt", "\n" + eval_svm.toSummaryString("\n ===Evaluasi ALGORITMA SVM===", true), "\n" + eval_svm.toMatrixString(), train);
                    }
                    if (!chk_redundant.isSelected() && !chk_feature.isSelected()) {
                        setNameFile("ResultSVM.txt", "\n" + eval_svm.toSummaryString("\n ===Evaluasi ALGORITMA SVM===", true), "\n" + eval_svm.toMatrixString(), train);
                    }
                    
                    
                } catch (Exception e) {
                }
                
                
                try {
                    prediksi(libsvm, "_AlgoritmaSvm");
                } catch (Exception e) {
                }
                long endtime = new Date().getTime();
                ta_svm.append("\n Duration Time(Second): " + (endtime - starttime) / 1000);
            }
        }
    }
    
    public void setNameFile(String Filename, String desc1, String desc2, Instances ins) throws IOException {
        String cb1 = "....";
        String cb2 = "10%";
        String cb3 = "1 jt";
        String a = null;
        
        BufferedWriter bw = null;
        String num = ins.numInstances() + "";
        System.out.println("Size:" + num);
        removeFile(num + Filename);
        
        a = num + Filename;
        bw = new BufferedWriter(new FileWriter(a));
        bw.append(desc1);
        bw.append(desc2);
        bw.close();
//        if (cb_amount.getSelectedItem().toString().equals(cb2)) {
//            a = cb2 + Filename;
//            bw = new BufferedWriter(new FileWriter(a));
//            bw.append(desc1);
//            bw.append(desc2);
//            bw.close();
//        } else if (cb_amount.getSelectedItem().toString().equals(cb3)) {
//            a = cb3 + Filename;
//            bw = new BufferedWriter(new FileWriter(a));
//            bw.append(desc1);
//            bw.append(desc2);
//            bw.close();
//        }
    }
    
    public void setArffFile(String Filename, Instances ins) throws IOException {
        String cb1 = "....";
        String cb2 = "10%";
        String cb3 = "1 jt";
        String a = null;
        
        BufferedWriter bw = null;
        String num = ins.numInstances() + "";
        System.out.println("Size:" + num);
        removeFile(num + Filename);
        
        a = num + Filename;
        bw = new BufferedWriter(new FileWriter(a));
        bw.close();
//        if (cb_amount.getSelectedItem().toString().equals(cb2)) {
//            a = cb2 + Filename;
//            bw = new BufferedWriter(new FileWriter(a));
//            bw.append(desc1);
//            bw.append(desc2);
//            bw.close();
//        } else if (cb_amount.getSelectedItem().toString().equals(cb3)) {
//            a = cb3 + Filename;
//            bw = new BufferedWriter(new FileWriter(a));
//            bw.append(desc1);
//            bw.append(desc2);
//            bw.close();
//        }
    }
    
    public void FungsiSVMwithCheckModel() throws FileNotFoundException {
        long starttime = new Date().getTime();
        Instances train = null;
        if (flNamePrePro == null) {
            train = new Instances(DataTrainPrePro());
        } else {
            train = new Instances(DataTrain());
        }
        train.setClassIndex(train.numAttributes() - 1);
        
        if (train.instance(1).toString().endsWith("?")) {
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame, "File Data Train tidak dapat diproses karena nilai kelas label salah!!");
            
        } else if (!DataTest().instance(1).toString().endsWith("?")) {
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame, "File Data Test tidak dapat diproses karena nilai kelas label salah!!");
        } else {
            try {
                
                LibSVM svm = new LibSVM();
                //instance train

                //svm.setOptions(option_svm);
                svm.buildClassifier(train);
                SerializationHelper s = new SerializationHelper();
                removeFile("ModelSVMKNN.model");
                s.write("ModelSVMKNN.model", svm);
                
                
                int nn = Integer.parseInt(et_knn_combine.getText().toString());
                IBk ibk = new IBk();
                ibk.setKNN(nn);
                try {
                    ibk.buildClassifier(train);
                    //write into model

                    Classifier c = new IBk();
                    c = (Classifier) s.read("ModelSVMKNN.model");
                    //System.out.println("read model: " + s.read("ModelSVMKNN.model") + "\n");
                    c.buildClassifier(train);
                    Evaluation evaluation = null;
                    evaluation = new Evaluation(train);
                    evaluation.crossValidateModel(c, train, 10, new Random(1));
                    ta_combine.append("\n" + evaluation.toSummaryString("\n ===Evaluasi ALGORITMA SVM-KNN===", true));
                    ta_combine.append("\n" + evaluation.toMatrixString());
                    
                    
                    if (chk_redundant.isSelected() && !chk_feature.isSelected()) {
                        setNameFile("ResultSVM_KNN_RR.txt", "\n" + evaluation.toSummaryString("\n ===Evaluasi ALGORITMA SVM KNN===", true), "\n" + evaluation.toMatrixString(), train);
                    }
                    if (chk_feature.isSelected() && !chk_redundant.isSelected()) {
                        
                        setNameFile("ResultSVM_KNN_FS.txt", "\n" + evaluation.toSummaryString("\n ===Evaluasi ALGORITMA SVM KNN===", true), "\n" + evaluation.toMatrixString(), train);
                        
                    }
                    if (chk_redundant.isSelected() && chk_feature.isSelected()) {
                        
                        setNameFile("ResultSVM_KNN_RR_FS.txt", "\n" + evaluation.toSummaryString("\n ===Evaluasi ALGORITMA SVM KNN===", true), "\n" + evaluation.toMatrixString(), train);
                    }
                    if (!chk_redundant.isSelected() && !chk_feature.isSelected()) {
                        
                        setNameFile("ResultSVM_KNN.txt", "\n" + evaluation.toSummaryString("\n ===Evaluasi ALGORITMA SVM KNN===", true), "\n" + evaluation.toMatrixString(), train);
                    }
                    prediksi(c, "_AlgoritmaSVMKNN");
                } catch (Exception e) {
                }
                
            } catch (Exception e) {
            }
            long endtime = new Date().getTime();
            ta_combine.append("\n Duration Time(Second): " + (endtime - starttime) / 1000);
        }



//        File f = null;
//        boolean bool = false;
//        SerializationHelper serial = new SerializationHelper();
//        try {
//            // create new files
//            f = new File("ModelKNN.model");
//
//            bool = f.exists();
//            // prints
//            System.out.println("File exists: " + bool);
//
//            if (bool == true) {
//                Classifier c = new SMO();
//                c = (Classifier) serial.read("ModelKNN.model");
//                Evaluation evaluation = null;
//                evaluation = new Evaluation(train);
//                evaluation.crossValidateModel(c, train, 10, new Random(1));
//                ta_combine.append("\n" + evaluation.toSummaryString("\n ===Evaluasi ALGORITMA SVM-KNN===", true));
//                ta_combine.append("\n" + evaluation.toMatrixString());
//
//            } else {
//
//                Classifier ibk = new IBk();
//                ibk.buildClassifier(DataTrain());
//                SerializationHelper s = new SerializationHelper();
//                s.write("ModelKNN.model", ibk);
//
//                Classifier c = new SMO();
//                c = (Classifier) serial.read("ModelKNN.model");
//                Evaluation evaluation = null;
//                evaluation = new Evaluation(train);
//                evaluation.crossValidateModel(c, train, 10, new Random(1));
//                ta_combine.append("\n" + evaluation.toSummaryString("\n ===Evaluasi ALGORITMA SVM-KNN===", true));
//                ta_combine.append("\n" + evaluation.toMatrixString());
//              
//            }
//        } catch (Exception e) {
//            // if any error occurs
//            e.printStackTrace();
//        }
    }
    
    public void FungsiKNNSVM() {
        Instances train = null;
        long starttime = new Date().getTime();
        try {
            
            IBk ibk = new IBk();
            int nn = Integer.parseInt(et_knn_combine.getText().toString());
            ibk.setKNN(nn);
            //instance train
            if (flNamePrePro == null) {
                train = new Instances(DataTrainPrePro());
            } else {
                train = new Instances(DataTrain());
            }
            train.setClassIndex(train.numAttributes() - 1);
            
            if (train.instance(1).toString().endsWith("?")) {
                JFrame frame = new JFrame("JOptionPane showMessageDialog example");
                JOptionPane.showMessageDialog(frame, "File Data Train tidak dapat diproses karena nilai kelas label salah!!");
                
            } else if (!DataTest().instance(1).toString().endsWith("?")) {
                JFrame frame = new JFrame("JOptionPane showMessageDialog example");
                JOptionPane.showMessageDialog(frame, "File Data Test tidak dapat diproses karena nilai kelas label salah!!");
                
            } else {
                //svm.setOptions(option_svm);
                ibk.buildClassifier(train);
                SerializationHelper s = new SerializationHelper();
                removeFile("ModelKNNSVM.model");
                s.write("ModelKNNSVM.model", ibk);
                LibSVM svm = new LibSVM();
                try {
                    svm.buildClassifier(train);
                    //write into model
                    Classifier c = new LibSVM();
                    c = (Classifier) s.read("ModelKNNSVM.model");
                    c.buildClassifier(train);
                    Evaluation evaluation = null;
                    evaluation = new Evaluation(train);
                    evaluation.crossValidateModel(c, train, 10, new Random(1));
                    ta_combine.append("\n" + evaluation.toSummaryString("\n ===Evaluasi ALGORITMA KNN-SVM===", true));
                    ta_combine.append("\n" + evaluation.toMatrixString());
                    if (chk_redundant.isSelected() && !chk_feature.isSelected()) {
                        setNameFile("ResultKNN_SVM_RR.txt", "\n" + evaluation.toSummaryString("\n ===Evaluasi ALGORITMA KNN-SVM===", true), "\n" + evaluation.toMatrixString(), train);
                    }
                    if (chk_feature.isSelected() && !chk_redundant.isSelected()) {
                        setNameFile("ResultKNN_SVM_FS.txt", "\n" + evaluation.toSummaryString("\n ===Evaluasi ALGORITMA KNN-SVM===", true), "\n" + evaluation.toMatrixString(), train);
                    }
                    if (chk_redundant.isSelected() && chk_feature.isSelected()) {
                        setNameFile("ResultKNN_SVM_RR_FS.txt", "\n" + evaluation.toSummaryString("\n ===Evaluasi ALGORITMA KNN-SVM===", true), "\n" + evaluation.toMatrixString(), train);
                    }
                    if (chk_redundant.isSelected() && chk_feature.isSelected()) {
                        setNameFile("ResultKNN_SVM.txt", "\n" + evaluation.toSummaryString("\n ===Evaluasi ALGORITMA KNN-SVM===", true), "\n" + evaluation.toMatrixString(), train);
                    }
                    prediksi(c, "_AlgoritmaKNNSVM");
                } catch (Exception e) {
                }
            }
        } catch (Exception e) {
        }
        long endtime = new Date().getTime();
        ta_combine.append("\n Duration Time(Second): " + (endtime - starttime) / 1000);
    }
    
    private void chk_cb() {
        int count = 0;
        if (chk_knn.isSelected() == true) {
            count++;
        }
        if (chk_svm.isSelected() == true) {
            count++;
        }
//        if (chk_bagging.isSelected() == true) {
//            count++;
//        }
        if (count < 2) {
            JDialog startupDialog = new JDialog((JDialog) null, "Warning!", false);
            startupDialog.setContentPane(new JOptionPane("You have to choose algortihm more than 1!"));
            startupDialog.pack();
            startupDialog.setLocationRelativeTo(null);
            startupDialog.setVisible(true);
            
        } else if (count > 1 && et_filename.getText().toString().equals("(train set)")) {
            JDialog startupDialog = new JDialog((JDialog) null, "Warning!", false);
            startupDialog.setContentPane(new JOptionPane("Please select file! "));
            startupDialog.pack();
            startupDialog.setLocationRelativeTo(null);
            startupDialog.setVisible(true);
        }
        
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                    
                    
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            public void run() {
                new GUI().setVisible(true);
            }
        });
        
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Run_Combine;
    private javax.swing.JButton btn_Run_Knn;
    private javax.swing.JButton btn_Run_Svm;
    private javax.swing.JButton btn_browsetest;
    private javax.swing.JButton btn_browsetrain;
    private javax.swing.JButton btn_preprocessing;
    private javax.swing.JButton btn_refresh;
    private javax.swing.JCheckBox chk_feature;
    private javax.swing.JCheckBox chk_knn;
    private javax.swing.JCheckBox chk_redundant;
    private javax.swing.JCheckBox chk_svm;
    private javax.swing.JTextField edt_knn;
    private javax.swing.JTextField edt_knnSvm;
    private javax.swing.JTextField edt_svm;
    private javax.swing.JTextField edt_svmKnn;
    private javax.swing.JTextField et_filename;
    private javax.swing.JTextField et_gamma;
    private javax.swing.JTextField et_gamma1;
    private javax.swing.JTextField et_knn;
    private javax.swing.JTextField et_knn_combine;
    private javax.swing.JTextField et_ord_knn;
    private javax.swing.JTextField et_ord_svm;
    private javax.swing.JTextField et_test;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel label_knn;
    private javax.swing.JLabel label_svm3;
    private javax.swing.JLabel lbl_knn;
    private javax.swing.JLabel lbl_knnSvm;
    private javax.swing.JLabel lbl_svm;
    private javax.swing.JLabel lbl_svmKnn;
    private javax.swing.JTextArea ta_combine;
    private javax.swing.JTextArea ta_fs;
    private javax.swing.JTextArea ta_knn;
    private javax.swing.JTextArea ta_prediction;
    private javax.swing.JTextArea ta_stat;
    private javax.swing.JTextArea ta_svm;
    // End of variables declaration//GEN-END:variables
}
